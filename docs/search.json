[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Flow predictions using control-oriented cluster-based network modeling",
    "section": "",
    "text": "Cover"
  },
  {
    "objectID": "Data/1_Writing/0_Deco/2_Thanks.html",
    "href": "Data/1_Writing/0_Deco/2_Thanks.html",
    "title": "Acknowledgments",
    "section": "",
    "text": "All praise and thanks to the\n\n\n\n\nONE\n\n\n\n \n\n\n, Who does neither need my praise nor my thanks. To the\n\n\n \n\n\n\n\nONE\n\n\n\n, Who is independent of everything and everyone, but on Whom everything and everyone depends.\n\n\n\n\n\n\nThanks to the supervisor\nThank you, Dr. Semaan - you provided me with the possibility to work on such a compelling and challenging topic. Even though the difficult tasks were not always pleasant, I very much appreciate the opportunity to have worked on these captivating tasks. Thank you for the time and effort you invested in this work. Also, thank you for the weekly English exercises and for explaining to me how to pronounce methodology correctly."
  },
  {
    "objectID": "Data/1_Writing/0_Deco/1_Erkl.html",
    "href": "Data/1_Writing/0_Deco/1_Erkl.html",
    "title": "Declaration of independent authorship",
    "section": "",
    "text": "I hereby declare that the present work, the master thesis, is solely and independently done by myself in all aspects, such as developments, code implementations, and writing of the thesis. In addition, I confirm that I did not use any tools, materials or sources other than those explicitly specified.\nFull name: Javed Arshad Butt \nDate and place: 29.04.2022, Braunschweig\nSignature:"
  },
  {
    "objectID": "Data/1_Writing/0_Deco/2_1_Abstract.html",
    "href": "Data/1_Writing/0_Deco/2_1_Abstract.html",
    "title": "Abstract",
    "section": "",
    "text": "In this master thesis, a data-driven modeling technique is proposed. It enables making predictions for general dynamic systems for unknown model parameter values or operating conditions. The tool is denoted as CNMccontrol-oriented Cluster-based Network Modeling. The most recent developed version delivered promising results for the chaotic Lorenz system (Lorenz 1963). Since, the earlier work was restricted to the application of only one dynamical system, with this contribution the first major improvement was to allow CNMccontrol-oriented Cluster-based Network Modeling to be utilized for any general dynamical system. For this, CNMccontrol-oriented Cluster-based Network Modeling was written from scratch in a modular manner. The limitation of the number of the dimension and the shape of the trajectory of the dynamical systems are removed. Adding a new dynamic system was designed such that it should be as straightforward as possible. To affirm this point, 10 dynamic systems, most of which are chaotic systems, are included by default. To be able to run CNMccontrol-oriented Cluster-based Network Modeling on arbitrary dynamic systems in an automated way, a parameter study for the modal decomposition method NMFNon-negative Matrix Factorization was implemented. However, since a single NMFNon-negative Matrix Factorization solution took up to hours, a second option was added, i.e., SVDSingular Value Decomposition. With SVDSingular Value Decomposition the most time-consuming task could be brought to a level of seconds. The improvements introduced, allow CNMccontrol-oriented Cluster-based Network Modeling to be executed on a general dynamic system on a normal computer in a reasonable time. Furthermore, CNMccontrol-oriented Cluster-based Network Modeling comes with its integrated post-processor in form of HTML files to inspect the generated plots in detail. All the parameters used in CNMccontrol-oriented Cluster-based Network Modeling some additional beneficial features can be controlled via one settings file.\n\n\n\n\nLorenz, Edward N. 1963. “Deterministic Nonperiodic Flow.” Journal of Atmospheric Sciences 20 (2): 130–41."
  },
  {
    "objectID": "Data/1_Writing/0_Deco/3_Used_Abbrev.html",
    "href": "Data/1_Writing/0_Deco/3_Used_Abbrev.html",
    "title": "Abbreviations",
    "section": "",
    "text": "ODE\n\n  Ordinary Differential Equation\n\nCNM\n\n  Cluster-based Network Modeling\n\nCNMc\n\n  control-oriented Cluster-based Network Modeling\n\nCMM\n\n  Cluster Markov-based Modeling\n\nCFD\n\n  Computational Fluid Dynamics\n\nRANS\n\n  Reynolds Averaged Navier Stockes\n\nDLR\n\n  German Aerospace Center\n\nGPU\n\n  Graphics Processing Unit\n\nCPU\n\n  Computer Processing Unit\n\nSDIC\n\n  Sensitive Dependence on Initial Conditions\n\nNMF\n\n  Non-negative Matrix Factorization\n\nSVD\n\n  Singular Value Decomposition\n\nRF\n\n  Random Forest\n\nCPD\n\n  Cluster Probability Distribution\n\nCPE\n\n  Centroid Position Evolution\n\nDTW\n\n  Dynamical Time Warping\n\nKNN\n\n  KNearest Neighbor"
  },
  {
    "objectID": "Data/1_Writing/1_Task/1_Introduction.html",
    "href": "Data/1_Writing/1_Task/1_Introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "In this work, a tool called control-oriented Cluster-based Network Modeling (CNMc) is further developed. The overall goal, in very brief terms, is to generate a model, which is able to predict the trajectories of general dynamical systems. The model shall be capable of predicting the trajectories when a model parameter value is changed. Some basics about dynamical systems are covered in subsection 3.0.1 and in-depth explanations about CNMccontrol-oriented Cluster-based Network Modeling are given in chapter ?sec-chap_2_Methodology. \nHowever, for a short and broad introduction to CNMccontrol-oriented Cluster-based Network Modeling the workflow depicted in figure 1.1 shall be highlighted. The input it receives is data of a dynamical system or space state vectors for a range of model parameter values. The two main important outcomes are some accuracy measurements and the predicted trajectory for each desired model parameter value. Any inexperienced user may only have a look at the predicted trajectories to quickly decide visually whether the prediction matches the trained data. Since CNMccontrol-oriented Cluster-based Network Modeling is written in a modular manner, meaning it can be regarded as a black-box function, it can easily be integrated into other existing codes or workflows. \n\n\n\nFigure 1.1— Broad overview: Workflow of"
  },
  {
    "objectID": "Data/1_Writing/1_Task/2_0_Motivation.html",
    "href": "Data/1_Writing/1_Task/2_0_Motivation.html",
    "title": "2  Motivation",
    "section": "",
    "text": "CFDComputational Fluid Dynamics is an indispensable technique, when aimed to obtain information about aerodynamic properties, such as drag and lift distributions. Modern CFDComputational Fluid Dynamics solvers, such as DLRGerman Aerospace Center’s TAU (Langer, Schwöppe, and Kroll 2014) often solves the RANSReynolds Averaged Navier Stockes equations to obtain one flow-field. Advanced solvers like TAU apply advanced mathematical knowledge to speed up calculations and heavily exploit multiple CPUsComputer Processing Units in an optimized manner. Nevertheless, depending on the size of the object and accuracy demands or in other terms mesh grid size, the computation often is not economically efficient enough. If the object for which a flow field is desired is a full aircraft, then even with a big cluster and making use of symmetry properties of the shape of the airplane, if such exists, the computation of one single flow field can still easily cost one or even multiple months in computation time. \nIn modern science, there is a trend towards relying on GPUsGraphics Processing Units instead of CPUsComputer Processing Units. Graphic cards possess much more cores than a CPU. However, even with the utilization of GPUsGraphics Processing Units and GPU-optimized CFDComputational Fluid Dynamics solvers, the computation is still very expensive. Not only in time but also in electricity costs. Running calculations on a cluster for multiple months is such expensive that wind tunnel measurements can be considered to be the economically more efficient choice to make. Regarding accuracy, wind tunnel measurements and CFDComputational Fluid Dynamics simulations with state-of-the-art solvers can be considered to be equally useful. When using CFDComputational Fluid Dynamics solvers, there is one more thing to keep in mind. Each outcome is only valid for one single set of input parameters. Within the set of input parameters, the user often is only interested in the impact of one parameter, e.g., the angle of attack. Consequently, wanting to capture the effect of the change of the angle of attack on the flow field, multiple CFDComputational Fluid Dynamics calculations need to be performed, i.e., for each desired angle of attack. Based on the chosen angle of attack the solver might be able to converge faster to a solution. However, the calculation time needs to be added up for each desired angle of attack. In terms of time and energy costs, this could again be more expensive than wind-tunnel measurements. Wind tunnel measurements are difficult to set up, but once a configuration is available, measuring flow field properties with it, in general, is known to be faster and easier than running CFDComputational Fluid Dynamics simulations.\n\nWithin the scope of this work, a data-driven tool was developed that allows predictions for dynamic systems. In (Pierzyna 2021) the first version of it showed promising results. However, it was dedicated to the solution of one single dynamical system, i.e., the Lorenz system (Lorenz 1963). Due to the focus on one singular dynamical system, the proposed control-oriented Cluster-based Network Modeling (CNMc) was not verified for other dynamical systems. Hence, one of the major goals of this thesis is to enable CNMccontrol-oriented Cluster-based Network Modeling to be applied to any general dynamical system. For this, it is important to state that because of two main reasons CNMccontrol-oriented Cluster-based Network Modeling was not built upon the first version of CNMccontrol-oriented Cluster-based Network Modeling, but written from scratch. First, since the initial version of CNMccontrol-oriented Cluster-based Network Modeling was designed for only a single dynamic system, extending it to a general CNMccontrol-oriented Cluster-based Network Modeling was considered more time-consuming than starting fresh. Second, not all parts of the initial version of CNMccontrol-oriented Cluster-based Network Modeling could be executed without errors. The current CNMccontrol-oriented Cluster-based Network Modeling is therefore developed in a modular manner, i.e., on the one hand, the implementation of any other dynamical system is straightforward. To exemplify this, 10 different dynamic systems are available by default, so new dynamic systems can be added analogously.\nThe second important aspect for allowing CNMccontrol-oriented Cluster-based Network Modeling to be utilized in any general dynamical system is the removal of the two limitations. In the first version of CNMccontrol-oriented Cluster-based Network Modeling the behavior of the dynamical systems had to be circular as, e.g., the ears of the Lorenz system (Lorenz 1963) are. Next, its dimensionality must be strictly 3-dimensional. Neither is a general dynamical system is not bound to exhibit a circular motion nor to be 3-dimensional. By removing these two limitations CNMccontrol-oriented Cluster-based Network Modeling can be leveraged on any dynamical system. However, the first version of CNMccontrol-oriented Cluster-based Network Modeling employed Non-negative Matrix Factorization (NMF) as the modal decomposition method. The exploited NMFNon-negative Matrix Factorization algorithm is highly computationally intensive, which makes a universal CNMccontrol-oriented Cluster-based Network Modeling application economically inefficient. Therefore, the current CNMccontrol-oriented Cluster-based Network Modeling has been extended by the option to choose between the NMFNon-negative Matrix Factorization and the newly implemented Singular Value Decomposition (SVD). The aim is not only that CNMccontrol-oriented Cluster-based Network Modeling is returning results within an acceptable timescale, but also to ensure that the quality of the modal decomposition remains at least at an equal level. Proofs for the latter can be found in section ?sec-sec_3_3_SVD_NMF.\nWith these modifications, the current CNMccontrol-oriented Cluster-based Network Modeling is now able to be used in any dynamical system within a feasible time frame. The next addressed issue is the B-spline interpolation. It is used in the propagation step of Cluster-based Network Modeling (CNM) (Fernex, Noack, and Semaan 2021) to smooth the predicted trajectory. However, as already noted in (Pierzyna 2021), when the number of the clustering centroids \\(K\\) is \\(K \\gtrapprox 15\\), the B-spline interpolation embeds oscillations with unacceptable high deviations from the original trajectories. To resolve this problem, the B-spline interpolation is replaced with linear interpolation. By preventing the occurrence of outliers caused by the B-spline interpolation, neither the autocorrelation defined in subsection 4.0.1 nor the predicted trajectories are made impractical . Apart from the main ability of CNMccontrol-oriented Cluster-based Network Modeling a high number of additional features are available, e.g., the entire pipeline of CNMccontrol-oriented Cluster-based Network Modeling with all its parameters can be adjusted via one file (settings.py), an incorporated log file, storing results at desired steps, the ability to execute multiple dynamical models consequentially and activating and disabling each step of CNMccontrol-oriented Cluster-based Network Modeling. The latter is particularly designed for saving computational time. Also, CNMccontrol-oriented Cluster-based Network Modeling comes with its own post-processor. It is optional to generate and save the plots. However, in the case of utilizing this feature, the plots are available as HTML files which, e.g., allow extracting further information about the outcome or rotating and zooming in 3d plots.\n\n\n\n\nFernex, Daniel, Bernd R. Noack, and Richard Semaan. 2021. “Cluster-Based Network Modelingfrom Snapshots to Complex Dynamical Systems.” Science Advances 7 (25). https://doi.org/10.1126/sciadv.abf5006.\n\n\nLanger, Stefan, Axel Schwöppe, and Norbert Kroll. 2014. “The DLR Flow Solver TAU - Status and Recent Algorithmic Developments.” In 52nd Aerospace Sciences Meeting. https://elib.dlr.de/90979/.\n\n\nLorenz, Edward N. 1963. “Deterministic Nonperiodic Flow.” Journal of Atmospheric Sciences 20 (2): 130–41.\n\n\nPierzyna, Maximilian. 2021. “Control-Oriented Cluster-Basednetwork Modeling.” Research report, TU Braunschweig."
  },
  {
    "objectID": "Data/1_Writing/1_Task/2_State_Of_Art.html",
    "href": "Data/1_Writing/1_Task/2_State_Of_Art.html",
    "title": "3  State of the art",
    "section": "",
    "text": "The desire to get fast CFDComputational Fluid Dynamics output is not new and also a data-driven approach is found in the literature. This section aims to describe some evolutionary steps of control-oriented Cluster-based Network Modeling (CNMc). Given that this work is built upon the most recent advancements, they will be explained in particular detail. Whereas the remaining development stages are briefly summarized to mainly clarify the differences and\nmention the reasons why improvements were desired. Since, this topic demands some prior knowledge to follow CNMccontrol-oriented Cluster-based Network Modeling’s workflow and goal, some basic principles about important topics shall be given in their subsection.\nThe first data-driven approach, which is known to the author, is by (Kaiser et al. 2014) and shall be called CMMCluster Markov-based Modeling. CNMccontrol-oriented Cluster-based Network Modeling is not directly built upon CMMCluster Markov-based Modeling but on the latest version of CNMCluster-based Network Modeling and is described in (Fernex, Noack, and Semaan 2021). CNMccontrol-oriented Cluster-based Network Modeling invokes CNMCluster-based Network Modeling many times in order to use its outcome for further progress. Therefore, it’s evident that only if CNMCluster-based Network Modeling is understood, CNMc’s progress can be followed. CMMCluster Markov-based Modeling on the other hand has only a historical link to CNMccontrol-oriented Cluster-based Network Modeling, but no line of code of CMMCluster Markov-based Modeling is invoked in CNMccontrol-oriented Cluster-based Network Modeling’s workflow. Consequently, CNMCluster-based Network Modeling will be explained in more detail than CMMCluster Markov-based Modeling.\n\n3.0.1 Principles\nCNM (Fernex, Noack, and Semaan 2021) is a method that uses some machine learning techniques, graphs, and probability theory to mirror the behavior of complex systems. These complex systems are described often by dynamical systems, which themselves are simply a set of differential equations. Differential equations are useful to capture motion. Thus, a dynamical system can be seen as a synonym for motion over time. Some differential equations can be solved in closed form, meaning analytically. However, for most of them either it is too difficult to obtain an analytical solution or the analytical solution is very unhandy or unknown. Unhandy in terms of the solution being expressed in too many terms. Therefore, in most cases, differential equations are solved numerically. Since the purpose of CNMCluster-based Network Modeling is not to be only used for analytically solvable equations, a numerical ordinary differential integrator is used. \nThe default solver is SciPy’s RK45 solver. It is a widely deployed solver and can also be applied to chaotic systems for integration over a certain amount of time. Another option for solving chaotic ODEOrdinary Differential Equations is LSODA. The developers of pySindy (Silva et al. 2020; Kaptanoglu et al. 2022) state on their homepage (“pySindy’s Remark on RK45 Vs. LSODA” 2022) that LSODA even outperforms the default RK45 when it comes to chaotic dynamical systems. The reasons why for CNMccontrol-oriented Cluster-based Network Modeling still RK45 was chosen will be given in section ?sec-sec_2_2_Data_Gen. It is important to remember that turbulent flows are chaotic. This is the main reason why in this work CNMccontrol-oriented Cluster-based Network Modeling, has been designed to handle not only general dynamical systems but also general chaotic attractors. Other well-known instances where chaos is found are, e.g., the weather, the motion of planets and also the financial market is believed to be chaotic. For more places, where chaos is found the reader is referred to (Argyris et al. 2017).\nNote that CNMccontrol-oriented Cluster-based Network Modeling is designed for all kinds of dynamical systems, it is not restricted to linear, nonlinear or chaotic systems. Therefore, chaotic systems shall be recorded to be only one application example of CNMccontrol-oriented Cluster-based Network Modeling. However, because chaotic attractors were primarily exploited in the context of the performed investigations in this work, a slightly lengthier introduction to chaotic systems is provided in the appendix ?sec-ch_Ap_Chaotic. Two terms that will be used extensively over this entire thesis are called model parameter value \\(\\beta\\) and a range of model parameter values \\(\\vec{\\beta}\\). A regular differential equation can be expressed as in equation 3.1, where \\(F\\) is denoted as the function which describes the dynamical system. The vector \\(\\vec{x}(t)\\) is the state vector. The form in which differential equations are viewed in this work is given in equation 3.2 .\n\\[\n\\begin{equation}\n    F = \\dot{\\vec{x}}(t) = \\frac{\\vec{x}(t)}{dt} = f(\\vec{x}(t))\n    \\label{eq_1_0_DGL}\n\\end{equation}\n\\tag{3.1}\\]\n\\[\n\\begin{equation}\n    F_{CNMc} = \\left(\\dot{\\vec{x}}(t), \\, \\vec{\\beta} \\right) =\n    \\left( \\frac{\\vec{x}(t)}{dt}, \\, \\vec{\\beta} \\right) =\n     f(\\vec{x}(t), \\, \\vec{\\beta} )\n    \\label{eq_1_1_MPV}\n\\end{equation}\n\\tag{3.2}\\]\nNote the vector \\(\\vec{\\beta}\\) indicates a range of model parameter values, i.e., the differential equation is solved for each model parameter value \\(\\beta\\) separately. The model parameter value \\(\\beta\\) is a constant and does not depend on the time, but rather it is a user-defined value. In other terms, it remains unchanged over the entire timeline for which the dynamical system is solved. The difference between \\(F\\) and \\(F_{CNMc}\\) is that \\(F\\) is the differential equation for only one \\(\\beta\\), while \\(F_{CNMc}\\) can be considered as the same differential equation, however, solved, for a range of individual \\(\\beta\\) values. The subscript CNMccontrol-oriented Cluster-based Network Modeling stresses that fact that CNMccontrol-oriented Cluster-based Network Modeling is performed for a range of model parameter values \\(\\vec{\\beta}\\). Some dynamical systems, which will be used for CNMccontrol-oriented Cluster-based Network Modeling’s validation can be found in section ?sec-sec_2_2_Data_Gen. They are written as a set of differential equations in the \\(\\beta\\) dependent form. Even a tiny change in \\(\\beta\\) can result in the emergence of an entirely different trajectory.   \n\n\n\n\n\n\n\n\nIn summary, the following key aspects can be concluded. The reason why CNMccontrol-oriented Cluster-based Network Modeling in future releases is believed to be able to manage real CFDComputational Fluid Dynamics fluid flow data and make predictions for unknown model parameter values \\(\\beta\\) is that turbulent flows are chaotic. Thus, allowing CNMccontrol-oriented Cluster-based Network Modeling to work with chaotic attractors in the course of this thesis is considered to be the first step toward predicting entire flow fields. \n\n\n\n\nArgyris, John, Gunter Faust, Maria Haase, and Rudolf Friedrich. 2017. Die Erforschung Des Chaos. Springer Berlin Heidelberg. https://doi.org/10.1007/978-3-662-54546-1.\n\n\nFernex, Daniel, Bernd R. Noack, and Richard Semaan. 2021. “Cluster-Based Network Modelingfrom Snapshots to Complex Dynamical Systems.” Science Advances 7 (25). https://doi.org/10.1126/sciadv.abf5006.\n\n\nKaiser, Eurika, Bernd R Noack, Laurent Cordier, Andreas Spohn, Marc Segond, Markus Abel, Guillaume Daviller, Jan Östh, Siniša Krajnović, and Robert K Niven. 2014. “Cluster-Based Reduced-Order Modelling of a Mixing Layer.” Journal of Fluid Mechanics 754: 365–414.\n\n\nKaptanoglu, Alan, Brian De Silva, Urban Fasel, Kadierdan Kaheman, Andy Goldschmidt, Jared Callaham, Charles Delahunt, et al. 2022. “PySINDy: A Comprehensive Python Package for Robust Sparse System Identification.” Journal of Open Source Software 7 (69): 3994. https://doi.org/10.21105/joss.03994.\n\n\n“pySindy’s Remark on RK45 Vs. LSODA.” 2022. https://pysindy.readthedocs.io/en/latest/examples/1_feature_overview.html.\n\n\nSilva, Brian de, Kathleen Champion, Markus Quade, Jean-Christophe Loiseau, J. Kutz, and Steven Brunton. 2020. “PySINDy: A Python Package for the Sparse Identification of Nonlinear Dynamical Systems from Data.” Journal of Open Source Software 5 (49): 2104. https://doi.org/10.21105/joss.02104."
  },
  {
    "objectID": "Data/1_Writing/1_Task/3_CNM.html",
    "href": "Data/1_Writing/1_Task/3_CNM.html",
    "title": "4  Cluster-based Network Modeling (CNM)",
    "section": "",
    "text": "In this subsection, the workflow of CNMCluster-based Network Modeling (Fernex, Noack, and Semaan 2021) will be elaborated, as well as the previous attempt to expand the algorithm to accommodate a range of model parameter values \\(\\vec{\\beta}\\). CNMCluster-based Network Modeling (Fernex, Noack, and Semaan 2021) is the basis on which CNMccontrol-oriented Cluster-based Network Modeling is built or rather CNMccontrol-oriented Cluster-based Network Modeling invokes CNMCluster-based Network Modeling multiple times for one of its preprocessing steps. CNM can be split up into 4 main tasks, which are data collection, clustering, calculating transition properties and propagation. The first step is to collect the data, which can be provided from any dynamic system or numerical simulations. In this study, only dynamical systems are investigated. Once the data for the dynamical system is passed to CNMCluster-based Network Modeling, the data is clustered, e.g., with k-means++ algorithm (Arthur and Vassilvitskii 2006). A detailed elaboration about this step is given in section ?sec-sec_2_3_Clustering. CNMCluster-based Network Modeling exploits graph theory for approximating the trajectory as a movement on nodes. These nodes are equivalent to the centroids, which are acquired through clustering. Next, the motion, i.e., movement from one centroid to another, shall be clarified.\nIn order to fully describe the motion on the centroids, the time at which one centroid is visited is exited, and also the order of movement must be known. Note, when saying the motion is on the centroids, that means the centroids or characteristic nodes do not move at all. The entire approximated motion of the original trajectory on the nodes is described with the transition property matrices \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\). The matrices \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\) are the transition probability and transition time matrices, respectively. \\(\\boldsymbol Q\\) is used to apply probability theory for predicting the next following most likely centroid. In other words, if the current location is at any node \\(c_i\\), \\(\\boldsymbol Q\\) will provide all possible successor centroids with their corresponding transition probabilities. Thus, the motion on the centroids through \\(\\boldsymbol Q\\) is probability-based. In more detail, the propagation of the motion on the centroids can be described as equation 4.1 . The variables are denoted as the propagated \\(\\vec{x}(t)\\) trajectory, time \\(t\\), centroid positions \\(\\vec{c}_k,\\, \\vec{c}_j\\), the time \\(t_j\\) where centroid \\(\\vec{c}_j\\) is left and the transition time \\(T_{k,j}\\) from \\(\\vec{c}_j\\) to \\(\\vec{c}_k\\) (Fernex, Noack, and Semaan 2021). Furthermore, for the sake of a smooth trajectory, the motion between the centroids is interpolated through a spline interpolation. \\[\n\\begin{equation}\n    \\vec{x}(t) = \\alpha_{kj} (t) \\, \\vec{c}_k + [\\, 1 - \\alpha_{kj} (t)\\,] \\, \\vec{c}_j, \\quad \\alpha_{kj} (t) = \\frac{t-t_j}{T_{k,j}}\n    \\label{eq_34}\n\\end{equation}\n\\tag{4.1}\\]\nThe \\(\\boldsymbol Q\\) matrix only contains non-trivial transitions, i.e., if after a transition the centroid remains on the same centroid, the transition is not considered to be a real transition in CNMCluster-based Network Modeling. This idea is an advancement to the original work of Kaiser et al. (Kaiser et al. 2014). In Kaiser et al. (Kaiser et al. 2014) the transition is modeled as a Markov model. Markov models enable non-trivial transitions. Consequently, the diagonals of the resulting non-direct transition matrix \\(\\boldsymbol{Q_n}\\)\nexhibits the highest values. The diagonal elements stand for non-trivial transitions which lead to idling on the same centroid many times. Such behavior is encountered and described by Kaiser et al. (Kaiser et al. 2014).\nThere are 3 more important aspects that come along when adhering to Markov models. First, the propagation of motion is done by matrix-vector multiplication. In the case of the existence of a stationary state, the solution will converge to the stationary state, with an increasing number of iterations, where no change with time happens. A dynamical system can only survive as long as change with time exists. In cases where no change with respect to time is encountered, equilibrium or fixed points are found. Now, if a stationary state or fixed point exists in the considered dynamical system, the propagation will tend to converge to this fixed point. However, the nature of Markov models must not necessarily be valid for general dynamical systems. Another way to see that is by applying some linear algebra. The long-term behavior of the Markov transition matrix can be obtained with equation 4.2 . Here, \\(l\\) is the number of iterations to get from one stage to another. Kaiser et al.  (Kaiser et al. 2014) depict in a figure, how the values of\n\\(\\boldsymbol{Q_n}\\) evolves after \\(1 \\mathrm{e}{+3}\\) steps. \\(\\boldsymbol{Q_n}\\) has become more uniform. \\[\n\\begin{equation}\n    \\label{eq_3_Infinite}\n    \\lim\\limits_{l \\to \\infty} \\boldsymbol{Q_n}^l\n\\end{equation}\n\\tag{4.2}\\]\nIf the number of steps is increased even further and all the rows would have the same probability value, \\(\\boldsymbol{Q_n}\\) would converge to a stationary point. What also can be concluded from rows being equal is that it does not matter from where the dynamical system was started or what its initial conditions were. The probability to end at one specific state or centroid is constant as the number of steps approaches infinity. Following that, it would violate the sensitive dependency on initial conditions, which often is considered to be mandatory for modeling chaotic systems. Moreover, chaotic systems amplify any perturbation exponentially, whether at time \\(t = 0\\) or at time \\(t&gt;&gt;0\\). \nThus, a stationary transition matrix \\(\\boldsymbol{Q_n}\\) is prohibited by chaos at any time step. This can be found to be one of the main reasons, why the Cluster Markov based Modeling (CMMCluster Markov-based Modeling) often fails to predict the trajectory. Li et al. (Li et al. 2021) summarize this observation compactly as after some time the initial condition would be forgotten and the asymptotic distribution would be reached. Further, they stated, that due to this fact, CMMCluster Markov-based Modeling would not be suited for modeling dynamical systems. The second problem which is involved, when deploying regular Markov modeling is that the future only depends on the current state. However, (Fernex, Noack, and Semaan 2021) has shown with the latest CNMCluster-based Network Modeling version that incorporating also past centroid positions for predicting the next centroid position increases the prediction quality. The latter effect is especially true when systems are complex.\nHowever, for multiple consecutive time steps the trajectories position still could be assigned to the same centroid position (trivial transitions). Thus, past centroids are those centroids that are found when going back in time through only non-trivial transitions. The number of incorporated past centroids is given as equation 4.3, where \\(L\\) is denoted as the model order number. It represents the number of all considered centroids, where the current and all the past centroids are included, with which the prediction of the successor centroid is made. \\[\n\\begin{equation}\n    B_{past} = L -1\n    \\label{eq_5_B_Past}\n\\end{equation}\n\\tag{4.3}\\]\nFurthermore, in (Fernex, Noack, and Semaan 2021) it is not simply believed that an increasing model order \\(L\\) would increase the outcome quality in every case. Therefore, a study on the number of \\(L\\) and the clusters \\(K\\) was conducted. The results proved that the choice of \\(L\\) and \\(K\\) depend on the considered dynamical system. \nThe third problem encountered when Markov models are used is that the time step must be provided. This time step is used to define when a transition is expected. In case the time step is too small, some amount of iterations is required to transit to the next centroid. Thus, non-trivial transitions would occur. In case the time step is too high, the intermediate centroids would be missed. Such behavior would be a coarse approximation of the real dynamics. Visually this can be thought of as jumping from one centroid to another while having skipped one or multiple centroids. The reconstructed trajectory could lead to an entirely wrong representation of the state-space. CNM generates the transition time matrix \\(\\boldsymbol T\\) from data and therefore no input from the user is required.\nA brief review of how the \\(\\boldsymbol Q\\) is built shall be provided. Since the concept of model order, \\(L\\) has been explained, it can be clarified that it is not always right to call \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\) matrices. The latter is only correct, if \\(L = 1\\), otherwise it must be denoted as a tensor. \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\) can always be referred to as tensors since a tensor incorporates matrices, i.e., a matrix is a tensor of rank 2. In order to generate \\(\\boldsymbol Q\\), \\(L\\) must be defined, such that the shape of \\(\\boldsymbol Q\\) is known. The next step is to gather all sequences of clusters \\(c_i\\). To understand that, we imagine the following scenario, \\(L = 3\\), which means 2 centroids from the past and the current one are incorporated to predict the next centroid. Furthermore, imagining that two cluster sequence scenarios were found, \\(c_0 \\rightarrow c_1 \\rightarrow c_2\\) and \\(c_5 \\rightarrow c_1 \\rightarrow c_2\\). These cluster sequences tell us that the current centroid is \\(c_2\\) and the remaining centroids belong to the past. In order to complete the sequence for \\(L = 3\\), the successor cluster also needs to be added, \\(c_0 \\rightarrow c_1 \\rightarrow c_2 \\rightarrow c_5\\) and \\(c_5 \\rightarrow c_1 \\rightarrow c_2 \\rightarrow c_4\\). The following step is to calculate the likelihood of a transition to a specific successor cluster. This is done with equation 4.4, where \\(n_{k, \\boldsymbol{j}}\\) is the amount of complete sequences, where also the successor is found. The index \\(j\\) is written as a vector in order to generalize the equation for \\(L \\ge 1\\). It then contains all incorporated centroids from the past and the current centroid. The index \\(k\\) represents the successor centroid (\\(\\boldsymbol{j} \\rightarrow k\\)). Finally, \\(n_{\\boldsymbol{j}}\\) counts all the matching incomplete sequences. \\[\n\\begin{equation}\n    \\label{eq_4_Poss}\n     P_{k, \\boldsymbol j} = \\frac{n_{k,\\boldsymbol{j}}}{n_{\\boldsymbol{j}}}\n\\end{equation}\n\\tag{4.4}\\]\nAfter having collected all the possible complete cluster sequences with their corresponding probabilities \\(\\boldsymbol Q\\), the transition time tensors \\(\\boldsymbol T\\) can be inferred from the data. With that, the residence time on each cluster is known and can be used for computing the transition times for every single transition. At this stage, it shall be highlighted again, CNM approximates its data fully with only two matrices or when \\(L \\ge 2\\) tensors, \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\). The final step is the prorogation following equation 4.1 . For smoothing the propagation between two centroids the B-spline interpolation is applied.\n\n\n\n\n\n\n\n4.0.1 First version of CNMc\nApart from this thesis, there already has been an attempt to build control-oriented Cluster-based Network Modeling (CNMc). The procedure, progress and results of the most recent effort are described in (Pierzyna 2021). Also, in the latter, the main idea was to predict the trajectories for dynamical systems with a control term or a model parameter value \\(\\beta\\). In this subsection, a review of (Pierzyna 2021) shall be given with pointing out which parts need to be improved. In addition, some distinctions between the previous version of CNMccontrol-oriented Cluster-based Network Modeling and the most recent version are named. Further applied modifications are provided in chapter ?sec-chap_2_Methodology.\nTo avoid confusion between the CNMccontrol-oriented Cluster-based Network Modeling version described in this thesis and the prior CNMccontrol-oriented Cluster-based Network Modeling version, the old version will be referred to as first CNMc. First CNMc starts by defining a range of model parameter values \\(\\vec{\\beta}\\). It was specifically designed to only be able to make predictions for the Lorenz attractor (Lorenz 1963), which is described with the set of equations ?eq-eq_6_Lorenz given in section ?sec-sec_2_2_Data_Gen. An illustrative trajectory is of the Lorenz system (Lorenz 1963) with \\(\\beta = 28\\) is depicted in figure 4.1 .\n\n\n\n\n\n\nFigure 4.1— Illustrative trajectory of the Lorenz attractor (Lorenz 1963), \\(\\beta = 28\\)\n\n\nHaving chosen a range of model parameter values \\(\\vec{\\beta}\\), the Lorenz system was solved numerically and its solution was supplied to CNMCluster-based Network Modeling in order to run k-means++ on all received trajectories.    The centroid label allocation by the k-means+ algorithm is conducted randomly. Thus, linking or matching centroid labels from one model parameter value \\(\\beta_i\\) to another model parameter value \\(\\beta_j\\), where \\(i \\neq j\\), is performed in 3 steps. The first two steps are ordering the \\(\\vec{\\beta}\\) in ascending order and transforming the Cartesian coordinate system into a spherical coordinate system. With the now available azimuth angle, each centroid is labeled in increasing order of the azimuth angle. The third step is to match the centroids across \\(\\vec{\\beta}\\), i.e., \\(\\beta_i\\) with \\(\\beta_j\\). For this purpose, the centroid label from the prior model parameter value is used as a reference to match its corresponding nearest centroid in the next model parameter value. As a result, one label can be assigned to one centroid across the available \\(\\vec{\\beta}\\).\nFirstly, (Pierzyna 2021) showed that ambiguous regions can occur. Here the matching of the centroids across the \\(\\vec{\\beta}\\) can not be trusted anymore. Secondly, the deployed coordinate transformation is assumed to only work properly in 3 dimensions. There is the possibility to set one or two variables to zero in order to use it in two or one dimension, respectively. However, it is not known, whether such an artificially decrease of dimensions yields a successful outcome for lower-dimensional (2- and 1-dimensional) dynamical systems. In the event of a 4-dimensional or even higher dimensional case, the proposed coordinate transformation cannot be used anymore. In conclusion, the transformation is only secure to be utilized in 3 dimensions. Thirdly, which is also acknowledged by (Pierzyna 2021) is that the coordinate transformation forces the dynamical system to have a circular-like trajectory, e.g., as the in figure 4.1 depicted Lorenz system does. Since not every dynamical system is forced to have a circular-like trajectory, it is one of the major parts which needs to be improved, when first CNMc is meant to be leveraged for all kinds of dynamical systems. Neither the number of dimensions nor the shape of the trajectory should matter for a generalized CNMccontrol-oriented Cluster-based Network Modeling.\nOnce the centroids are matched across all the available \\(\\vec{\\beta}\\) pySINDy (Brunton, Proctor, and Kutz 2016; Silva et al. 2020; Kaptanoglu et al. 2022) is used to build a regression model. This regression model serves the purpose of capturing all centroid positions of the calculated model parameter values \\(\\vec{\\beta }\\) and making predictions for unseen \\(\\vec{\\beta}_{unseen}\\). Next, a preprocessing step is performed on the transition property tensors \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\). Both are scaled, such that the risk of a bias is assumed to be reduced. Then, on both Non-negative Matrix Factorization (NMF) (Lee and Seung 1999) is applied. Following equation 4.5 NMFNon-negative Matrix Factorization (Lee and Seung 1999) returns two matrices, i.e., \\(\\boldsymbol W\\) and \\(\\boldsymbol H\\). The matrices exhibit a physically relevant meaning. \\(\\boldsymbol W\\) corresponds to a mode collection and \\(\\boldsymbol H\\) contains the weighting factor for each corresponding mode. \\[\n\\begin{equation}\n    \\label{eq_5_NMF}\n    \\boldsymbol {A_{i \\mu}} \\approx \\boldsymbol A^{\\prime}_{i \\mu}  = (\\boldsymbol W  \\boldsymbol H)_{i \\mu}  = \\sum_{a = 1}^{r}\n    \\boldsymbol W_{ia} \\boldsymbol H_{a \\mu}\n\\end{equation}\n\\tag{4.5}\\]\nThe number of modes \\(r\\) depends on the underlying dynamical system. Firstly, the NMFNon-negative Matrix Factorization is utilized by deploying optimization. The goal is to satisfy the condition that, the deviation between the original matrix and the approximated matrix shall be below a chosen threshold. For this purpose, the number of required optimization iterations easily can be in the order of \\(\\mathcal{O} (1 \\mathrm{e}+7)\\). The major drawback here is that such a high number of iterations is computationally very expensive. Secondly, for first CNMc the number of modes \\(r\\) must be known beforehand. Since in most cases this demand cannot be fulfilled two issues arise. On the one hand, running NMFNon-negative Matrix Factorization on a single known \\(r\\) can already be considered to be computationally expensive. On the other hand, conducting a study to find the appropriate \\(r\\) involves even more computational effort. Pierzyna (Pierzyna 2021) acknowledges this issue and defined it to be one of the major limitations. \nThe next step is to generate a regression model with Random Forest (RF). Some introductory words about RFRandom Forest are given in subsection ?sec-subsec_2_4_2_QT. As illustrated in (Pierzyna 2021), RFRandom Forest was able to reproduce the training data reasonably well. However, it faced difficulties to approximate spike-like curves. Once the centroid positions and the two transitions property tensors \\(\\boldsymbol Q\\) and \\(\\boldsymbol T\\) are known, they are passed to CNMCluster-based Network Modeling to calculate the predicted trajectories. For assessing the prediction quality two methods are used, i.e., the autocorrelation and the Cluster Probability Distribution (CPD). CPDCluster Probability Distribution outlines the probability of being on one of the \\(K\\) clusters. The autocorrelation given in equation 4.6 allows comparing two trajectories with a phase-mismatch (Protas, Noack, and Östh 2015) and it measures how well a point in trajectory correlates with a point that is some time steps ahead. The variables in equation 4.6 are denoted as time lag \\(\\tau\\), state space vector \\(\\boldsymbol x\\), time \\(t\\) and the inner product \\((\\boldsymbol x, \\boldsymbol y) = \\boldsymbol x \\cdot \\boldsymbol{y}^T\\). \\[\n\\begin{equation}\n    R(\\tau) = \\frac{1}{T - \\tau} \\int\\limits_{0}^{T-\\tau}\\, (\\boldsymbol{x} (t), \\boldsymbol{x}(t+ \\tau))    dt, \\quad \\tau \\in [\\, 0, \\, T\\,]\n    \\label{eq_35}\n\\end{equation}\n\\tag{4.6}\\]\nFirst CNMc proved to work well for the Lorenz system only for the number of centroids up to \\(K=10\\) and small \\(\\beta\\). Among the points which need to be improved is the method to match the centroids across the chosen \\(\\vec{\\beta}\\). Because of this, two of the major problems occur, i.e., the limitation to 3 dimensions and the behavior of the trajectory must be circular, similar to the Lorenz system (Lorenz 1963). These demands are the main obstacles to the application of first CNMc to all kinds of dynamical systems. The modal decomposition with NMFNon-negative Matrix Factorization is the most computationally intensive part and should be replaced by a faster alternative.\n\n\n\n\nArthur, David, and Sergei Vassilvitskii. 2006. “K-Means++: The Advantages of Careful Seeding.” Stanford.\n\n\nBrunton, Steven L, Joshua L Proctor, and J Nathan Kutz. 2016. “Sparse Identification of Nonlinear Dynamics with Control (SINDYc).” IFAC-PapersOnLine 49 (18): 710–15.\n\n\nFernex, Daniel, Bernd R. Noack, and Richard Semaan. 2021. “Cluster-Based Network Modelingfrom Snapshots to Complex Dynamical Systems.” Science Advances 7 (25). https://doi.org/10.1126/sciadv.abf5006.\n\n\nKaiser, Eurika, Bernd R Noack, Laurent Cordier, Andreas Spohn, Marc Segond, Markus Abel, Guillaume Daviller, Jan Östh, Siniša Krajnović, and Robert K Niven. 2014. “Cluster-Based Reduced-Order Modelling of a Mixing Layer.” Journal of Fluid Mechanics 754: 365–414.\n\n\nKaptanoglu, Alan, Brian De Silva, Urban Fasel, Kadierdan Kaheman, Andy Goldschmidt, Jared Callaham, Charles Delahunt, et al. 2022. “PySINDy: A Comprehensive Python Package for Robust Sparse System Identification.” Journal of Open Source Software 7 (69): 3994. https://doi.org/10.21105/joss.03994.\n\n\nLee, Daniel D, and H Sebastian Seung. 1999. “Learning the Parts of Objects by Non-Negative Matrix Factorization.” Nature 401 (6755): 788–91.\n\n\nLi, Hao, Daniel Fernex, Richard Semaan, Jianguo Tan, Marek Morzyński, and Bernd R Noack. 2021. “Cluster-Based Network Model.” Journal of Fluid Mechanics 906.\n\n\nLorenz, Edward N. 1963. “Deterministic Nonperiodic Flow.” Journal of Atmospheric Sciences 20 (2): 130–41.\n\n\nPierzyna, Maximilian. 2021. “Control-Oriented Cluster-Basednetwork Modeling.” Research report, TU Braunschweig.\n\n\nProtas, Bartosz, Bernd R Noack, and Jan Östh. 2015. “Optimal Nonlinear Eddy Viscosity in Galerkin Models of Turbulent Flows.” Journal of Fluid Mechanics 766: 337–67.\n\n\nSilva, Brian de, Kathleen Champion, Markus Quade, Jean-Christophe Loiseau, J. Kutz, and Steven Brunton. 2020. “PySINDy: A Python Package for the Sparse Identification of Nonlinear Dynamical Systems from Data.” Journal of Open Source Software 5 (49): 2104. https://doi.org/10.21105/joss.02104."
  }
]